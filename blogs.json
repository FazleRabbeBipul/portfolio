{"status":"ok","feed":{"url":"https://medium.com/feed/@@rabbecse1677","title":"Stories by Fazle Rabbe Bipul on Medium","link":"https://medium.com/@rabbecse1677?source=rss-74029bb25da3------2","author":"","description":"Stories by Fazle Rabbe Bipul on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*sYdjHhLWv0BXGM2j"},"items":[{"title":"Dijkstra\u2019s Algorithm / \u09a1\u09be\u09af\u09bc\u09be\u0995\u09cd\u09b8\u099f\u09cd\u09b0\u09be \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae","pubDate":"2024-11-07 18:59:10","link":"https://medium.com/@rabbecse1677/dijkstras-algorithm-%E0%A6%A1%E0%A6%BE%E0%A6%AF%E0%A6%BC%E0%A6%BE%E0%A6%95%E0%A7%8D%E0%A6%B8%E0%A6%9F%E0%A7%8D%E0%A6%B0%E0%A6%BE-%E0%A6%8F%E0%A6%B2%E0%A6%97%E0%A6%B0%E0%A6%BF%E0%A6%A6%E0%A6%AE-40e3551f8581?source=rss-74029bb25da3------2","guid":"https://medium.com/p/40e3551f8581","author":"Fazle Rabbe Bipul","thumbnail":"","description":"\n<p>\u09a1\u09be\u09af\u09bc\u09be\u0995\u09cd\u09b8\u099f\u09cd\u09b0\u09be \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u098f\u0995\u099f\u09bf \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 \u09a6\u09c1\u099f\u09bf \u09a8\u09cb\u09a1\u09c7\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u09ac\u09be <em>shortest distance</em> \u0996\u09c1\u0981\u099c\u09c7 \u09ac\u09c7\u09b0 \u0995\u09b0\u09a4\u09c7 \u09ac\u09cd\u09af\u09ac\u09b9\u09c3\u09a4\u00a0\u09b9\u09af\u09bc\u0964</p>\n<p>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u099f\u09bf Bellman-Ford \u098f\u09b0 \u09a4\u09c1\u09b2\u09a8\u09be\u09af\u09bc \u0995\u09ae \u099c\u099f\u09bf\u09b2\u09a4\u09be\u09af\u09bc \u0995\u09be\u099c \u0995\u09b0\u09c7, \u098f\u09ac\u0982 \u09b8\u09be\u09a7\u09be\u09b0\u09a3\u09a4 \u0995\u09ae \u09b8\u09ae\u09af\u09bc\u09c7 \u09b8\u09ae\u09be\u09a7\u09be\u09a8 \u09a6\u09c7\u09af\u09bc\u0964 Dijkstra\u2019s Algorithm \u0995\u09be\u099c \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0986\u09ae\u09b0\u09be \u098f\u0995\u099f\u09bf <strong><em>priority queue</em></strong> \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09ac\u09cb, \u09af\u09be <strong>Min heap</strong> \u09a7\u09b0\u09a8\u09c7\u09b0 \u09b9\u09ac\u09c7, \u0985\u09b0\u09cd\u09a5\u09be\u09ce <strong>queue \u098f\u09b0 \u0989\u09aa\u09b0\u09c7 \u09b8\u09b0\u09cd\u09ac\u09a6\u09be \u099b\u09cb\u099f value\u00a0\u09a5\u09be\u0995\u09ac\u09c7\u0964</strong></p>\n<p><strong>\u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u09aa\u09cd\u09b0\u0995\u09cd\u09b0\u09bf\u09af\u09bc\u09be:</strong></p>\n<p>\u09aa\u09cd\u09b0\u09a5\u09ae\u09c7 {distance, node} \u098f\u09b0 \u0986\u0995\u09be\u09b0\u09c7 \u09a8\u09cb\u09a1 \u0993 \u09a8\u09cd\u09af\u09c2\u09a8\u09a4\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac\u09c7\u09b0 \u09aa\u09c7\u09af\u09bc\u09be\u09b0\u099f\u09bf priority queue-\u09a4\u09c7 \u09b0\u09be\u0996\u09ac\u09cb\u0964 \u09b6\u09c1\u09b0\u09c1\u09a4\u09c7 {0, source} \u09aa\u09c1\u09b6 \u0995\u09b0\u09ac\u09cb, \u0995\u09be\u09b0\u09a3 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1\u09c7 \u09af\u09be\u0993\u09af\u09bc\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0995\u09cb\u09a8 \u0985\u09a4\u09bf\u09b0\u09bf\u0995\u09cd\u09a4 \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u09b2\u09be\u0997\u09c7\u00a0\u09a8\u09be\u0964</p>\n<p>Bellman-Ford \u098f\u09b0 \u09ae\u09a4\u09cb\u0987, \u098f\u0996\u09be\u09a8\u09c7 \u098f\u0995\u099f\u09bf dis array \u09a5\u09be\u0995\u09ac\u09c7\u0964 \u09b6\u09c1\u09b0\u09c1\u09a4\u09c7 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u099b\u09be\u09a1\u09bc\u09be \u0985\u09a8\u09cd\u09af\u09be\u09a8\u09cd\u09af \u09a8\u09cb\u09a1\u09c7\u09b0 distance \u0987\u09a8\u09ab\u09bf\u09a8\u09bf\u099f\u09bf (inf) \u09a6\u09bf\u09af\u09bc\u09c7 \u098f\u09b8\u09be\u0987\u09a8 \u0995\u09b0\u09be \u09a5\u09be\u0995\u09ac\u09c7\u0964 \u098f\u09b0\u09aa\u09b0, \u0986\u09ae\u09b0\u09be queue-\u098f\u09b0 \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09aa\u09c7\u09af\u09bc\u09be\u09b0 \u09aa\u09aa \u0995\u09b0\u09c7 \u099a\u09c7\u0995 \u0995\u09b0\u09ac\u09cb \u09af\u09c7, \u09b8\u09c7\u0987 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u0985\u09a8\u09cd\u09af \u09a8\u09cb\u09a1\u09c7 \u09af\u09be\u0993\u09af\u09bc\u09be\u09b0 \u09a8\u09a4\u09c1\u09a8 \u0995\u09cb\u09a8 \u0995\u09ae distance \u0986\u099b\u09c7\u00a0\u0995\u09bf\u09a8\u09be\u0964</p>\n<p>\u09af\u09a6\u09bf \u0995\u09ae distance \u09aa\u09be\u0993\u09af\u09bc\u09be \u09af\u09be\u09af\u09bc, \u09a4\u09be\u09b9\u09b2\u09c7 queue-\u09a4\u09c7 \u0986\u09aa\u09a1\u09c7\u099f\u09c7\u09a1 distance \u09b8\u09b9 \u09b8\u09c7\u0987 \u09a8\u09a4\u09c1\u09a8 \u09a8\u09cb\u09a1 \u09aa\u09c1\u09b6 \u0995\u09b0\u09ac\u09cb \u098f\u09ac\u0982 dis array-\u09a4\u09c7 distance \u0986\u09aa\u09a1\u09c7\u099f \u0995\u09b0\u09c7 \u09b0\u09be\u0996\u09ac\u09cb\u0964 queue \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0996\u09be\u09b2\u09bf \u09a8\u09be \u09b9\u0993\u09af\u09bc\u09be \u09aa\u09b0\u09cd\u09af\u09a8\u09cd\u09a4 \u0986\u09ae\u09b0\u09be \u098f\u0987 \u09aa\u09a6\u09cd\u09a7\u09a4\u09bf\u09a4\u09c7 \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af shortest distance \u0996\u09c1\u0981\u099c\u09c7\u00a0\u09aa\u09be\u09ac\u09cb\u0964</p>\n<h3>Code C++</h3>\n<pre>#include &lt;bits/stdc++.h&gt;<br>#define pb push_back<br>#define pll pair&lt;long long, long long&gt;<br>using namespace std;<br><br>int main()<br>{<br>    long long node, edges;<br>    cin &gt;&gt; node &gt;&gt; edges;<br><br>    vector&lt;pll&gt; G[node + 1];<br>    for (int i = 0; i &lt; edges; i++) {<br>        long long u, v, wt;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; wt;<br>        G[u].pb({v, wt});<br>        G[v].pb({u, wt});<br>    }<br><br>    long long source;<br>    cin &gt;&gt; source;<br><br>    long long dis[node + 1], inf = INT_MAX;<br>    for (int i = 0; i &lt;= node; i++) dis[i] = inf;<br><br>    priority_queue&lt;pll&gt; pq;  // {dis, node}<br>    pq.push({0, source});<br>    dis[source] = 0;<br><br>    while (!pq.empty()) {<br>        long long u = pq.top().second;<br>        long long cost = -1 * pq.top().first; // Min-heap style<br>        pq.pop();<br><br>        for (auto it : G[u]) {<br>            long long v = it.first, wt = it.second;<br>            if ((cost + wt) &lt; dis[v]) {<br>                dis[v] = cost + wt;<br>                pq.push({-1 * (cost + wt), v});<br>            }<br>        }<br>    }<br><br>    cout &lt;&lt; \"Check Distances:\" &lt;&lt; endl;<br>    for (int i = 1; i &lt;= node; i++) {<br>        cout &lt;&lt; source &lt;&lt; \"-&gt;\" &lt;&lt; i &lt;&lt; \" = \" &lt;&lt; dis[i] &lt;&lt; endl;<br>    }<br>}</pre>\n<h4>\u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf:</h4>\n<p>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u09b8\u09ae\u09af\u09bc\u099c\u099f\u09bf\u09b2\u09a4\u09be \u09b9\u09b2 <strong>O(E * log2(E))</strong>, \u09af\u09c7\u0996\u09be\u09a8\u09c7 E \u09b9\u099a\u09cd\u099b\u09c7 \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 <em>edge</em>\u00a0\u09b8\u0982\u0996\u09cd\u09af\u09be\u0964</p>\n<p><em>\u201c\u09a1\u09be\u09df\u09be\u0995\u09cd\u09b8\u099f\u09cd\u09b0\u09be \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u0986\u09b0\u0993 \u09a6\u09cd\u09b0\u09c1\u09a4 \u098f\u09ac\u0982 \u0995\u09be\u09b0\u09cd\u09af\u0995\u09b0 \u0995\u09b0\u09a4\u09c7 \u0995\u09bf\u099b\u09c1 \u0985\u09aa\u09cd\u099f\u09bf\u09ae\u09be\u0987\u099c\u09c7\u09b6\u09a8 \u0995\u09cc\u09b6\u09b2 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09be \u09af\u09c7\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09ae\u09b0\u09be Indexed Priority Queue (IPQ) \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09c7 \u0995\u09c0\u09ad\u09be\u09ac\u09c7 \u0995\u09bf\u09ad\u09be\u09ac\u09c7 \u09aa\u09c1\u09b0\u09be\u09a8\u09cb \u09a8\u09cb\u09a1\u0997\u09c1\u09b2\u09cb\u09b0 \u099c\u09a8\u09cd\u09af \u09a1\u09bf\u09b8\u09cd\u099f\u09c7\u09a8\u09cd\u09b8 \u099a\u09c7\u0995\u09bf\u0982 \u098f\u09dc\u09bf\u09df\u09c7 \u099a\u09b2\u09a4\u09c7 \u09aa\u09be\u09b0\u09bf \u098f\u09ac\u0982 \u098f\u099f\u09bf \u0995\u09bf\u09ad\u09be\u09ac\u09c7 O(E * log2(V)) \u099f\u09be\u0987\u09ae \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf\u09a4\u09c7 \u0995\u09be\u09b0\u09cd\u09af\u0995\u09b0\u09c0 \u09b9\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7, \u09a4\u09be \u0986\u09b2\u09cb\u099a\u09a8\u09be \u0995\u09b0\u09ac\u09cb\u0964\u201d \u098f\u0987 \u09a8\u09bf\u09df\u09c7 \u0986\u09b2\u09be\u09a6\u09be \u098f\u0995\u099f\u09bf \u09b8\u09cd\u099f\u09cb\u09b0\u09bf\u00a0\u09b2\u09c7\u0996\u09ac\u2026</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=40e3551f8581\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>\u09a1\u09be\u09af\u09bc\u09be\u0995\u09cd\u09b8\u099f\u09cd\u09b0\u09be \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u098f\u0995\u099f\u09bf \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 \u09a6\u09c1\u099f\u09bf \u09a8\u09cb\u09a1\u09c7\u09b0 \u09ae\u09a7\u09cd\u09af\u09c7 \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u09ac\u09be <em>shortest distance</em> \u0996\u09c1\u0981\u099c\u09c7 \u09ac\u09c7\u09b0 \u0995\u09b0\u09a4\u09c7 \u09ac\u09cd\u09af\u09ac\u09b9\u09c3\u09a4\u00a0\u09b9\u09af\u09bc\u0964</p>\n<p>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u099f\u09bf Bellman-Ford \u098f\u09b0 \u09a4\u09c1\u09b2\u09a8\u09be\u09af\u09bc \u0995\u09ae \u099c\u099f\u09bf\u09b2\u09a4\u09be\u09af\u09bc \u0995\u09be\u099c \u0995\u09b0\u09c7, \u098f\u09ac\u0982 \u09b8\u09be\u09a7\u09be\u09b0\u09a3\u09a4 \u0995\u09ae \u09b8\u09ae\u09af\u09bc\u09c7 \u09b8\u09ae\u09be\u09a7\u09be\u09a8 \u09a6\u09c7\u09af\u09bc\u0964 Dijkstra\u2019s Algorithm \u0995\u09be\u099c \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0986\u09ae\u09b0\u09be \u098f\u0995\u099f\u09bf <strong><em>priority queue</em></strong> \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09ac\u09cb, \u09af\u09be <strong>Min heap</strong> \u09a7\u09b0\u09a8\u09c7\u09b0 \u09b9\u09ac\u09c7, \u0985\u09b0\u09cd\u09a5\u09be\u09ce <strong>queue \u098f\u09b0 \u0989\u09aa\u09b0\u09c7 \u09b8\u09b0\u09cd\u09ac\u09a6\u09be \u099b\u09cb\u099f value\u00a0\u09a5\u09be\u0995\u09ac\u09c7\u0964</strong></p>\n<p><strong>\u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u09aa\u09cd\u09b0\u0995\u09cd\u09b0\u09bf\u09af\u09bc\u09be:</strong></p>\n<p>\u09aa\u09cd\u09b0\u09a5\u09ae\u09c7 {distance, node} \u098f\u09b0 \u0986\u0995\u09be\u09b0\u09c7 \u09a8\u09cb\u09a1 \u0993 \u09a8\u09cd\u09af\u09c2\u09a8\u09a4\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac\u09c7\u09b0 \u09aa\u09c7\u09af\u09bc\u09be\u09b0\u099f\u09bf priority queue-\u09a4\u09c7 \u09b0\u09be\u0996\u09ac\u09cb\u0964 \u09b6\u09c1\u09b0\u09c1\u09a4\u09c7 {0, source} \u09aa\u09c1\u09b6 \u0995\u09b0\u09ac\u09cb, \u0995\u09be\u09b0\u09a3 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1\u09c7 \u09af\u09be\u0993\u09af\u09bc\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0995\u09cb\u09a8 \u0985\u09a4\u09bf\u09b0\u09bf\u0995\u09cd\u09a4 \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u09b2\u09be\u0997\u09c7\u00a0\u09a8\u09be\u0964</p>\n<p>Bellman-Ford \u098f\u09b0 \u09ae\u09a4\u09cb\u0987, \u098f\u0996\u09be\u09a8\u09c7 \u098f\u0995\u099f\u09bf dis array \u09a5\u09be\u0995\u09ac\u09c7\u0964 \u09b6\u09c1\u09b0\u09c1\u09a4\u09c7 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u099b\u09be\u09a1\u09bc\u09be \u0985\u09a8\u09cd\u09af\u09be\u09a8\u09cd\u09af \u09a8\u09cb\u09a1\u09c7\u09b0 distance \u0987\u09a8\u09ab\u09bf\u09a8\u09bf\u099f\u09bf (inf) \u09a6\u09bf\u09af\u09bc\u09c7 \u098f\u09b8\u09be\u0987\u09a8 \u0995\u09b0\u09be \u09a5\u09be\u0995\u09ac\u09c7\u0964 \u098f\u09b0\u09aa\u09b0, \u0986\u09ae\u09b0\u09be queue-\u098f\u09b0 \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09aa\u09c7\u09af\u09bc\u09be\u09b0 \u09aa\u09aa \u0995\u09b0\u09c7 \u099a\u09c7\u0995 \u0995\u09b0\u09ac\u09cb \u09af\u09c7, \u09b8\u09c7\u0987 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u0985\u09a8\u09cd\u09af \u09a8\u09cb\u09a1\u09c7 \u09af\u09be\u0993\u09af\u09bc\u09be\u09b0 \u09a8\u09a4\u09c1\u09a8 \u0995\u09cb\u09a8 \u0995\u09ae distance \u0986\u099b\u09c7\u00a0\u0995\u09bf\u09a8\u09be\u0964</p>\n<p>\u09af\u09a6\u09bf \u0995\u09ae distance \u09aa\u09be\u0993\u09af\u09bc\u09be \u09af\u09be\u09af\u09bc, \u09a4\u09be\u09b9\u09b2\u09c7 queue-\u09a4\u09c7 \u0986\u09aa\u09a1\u09c7\u099f\u09c7\u09a1 distance \u09b8\u09b9 \u09b8\u09c7\u0987 \u09a8\u09a4\u09c1\u09a8 \u09a8\u09cb\u09a1 \u09aa\u09c1\u09b6 \u0995\u09b0\u09ac\u09cb \u098f\u09ac\u0982 dis array-\u09a4\u09c7 distance \u0986\u09aa\u09a1\u09c7\u099f \u0995\u09b0\u09c7 \u09b0\u09be\u0996\u09ac\u09cb\u0964 queue \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0996\u09be\u09b2\u09bf \u09a8\u09be \u09b9\u0993\u09af\u09bc\u09be \u09aa\u09b0\u09cd\u09af\u09a8\u09cd\u09a4 \u0986\u09ae\u09b0\u09be \u098f\u0987 \u09aa\u09a6\u09cd\u09a7\u09a4\u09bf\u09a4\u09c7 \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af shortest distance \u0996\u09c1\u0981\u099c\u09c7\u00a0\u09aa\u09be\u09ac\u09cb\u0964</p>\n<h3>Code C++</h3>\n<pre>#include &lt;bits/stdc++.h&gt;<br>#define pb push_back<br>#define pll pair&lt;long long, long long&gt;<br>using namespace std;<br><br>int main()<br>{<br>    long long node, edges;<br>    cin &gt;&gt; node &gt;&gt; edges;<br><br>    vector&lt;pll&gt; G[node + 1];<br>    for (int i = 0; i &lt; edges; i++) {<br>        long long u, v, wt;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; wt;<br>        G[u].pb({v, wt});<br>        G[v].pb({u, wt});<br>    }<br><br>    long long source;<br>    cin &gt;&gt; source;<br><br>    long long dis[node + 1], inf = INT_MAX;<br>    for (int i = 0; i &lt;= node; i++) dis[i] = inf;<br><br>    priority_queue&lt;pll&gt; pq;  // {dis, node}<br>    pq.push({0, source});<br>    dis[source] = 0;<br><br>    while (!pq.empty()) {<br>        long long u = pq.top().second;<br>        long long cost = -1 * pq.top().first; // Min-heap style<br>        pq.pop();<br><br>        for (auto it : G[u]) {<br>            long long v = it.first, wt = it.second;<br>            if ((cost + wt) &lt; dis[v]) {<br>                dis[v] = cost + wt;<br>                pq.push({-1 * (cost + wt), v});<br>            }<br>        }<br>    }<br><br>    cout &lt;&lt; \"Check Distances:\" &lt;&lt; endl;<br>    for (int i = 1; i &lt;= node; i++) {<br>        cout &lt;&lt; source &lt;&lt; \"-&gt;\" &lt;&lt; i &lt;&lt; \" = \" &lt;&lt; dis[i] &lt;&lt; endl;<br>    }<br>}</pre>\n<h4>\u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf:</h4>\n<p>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u09b8\u09ae\u09af\u09bc\u099c\u099f\u09bf\u09b2\u09a4\u09be \u09b9\u09b2 <strong>O(E * log2(E))</strong>, \u09af\u09c7\u0996\u09be\u09a8\u09c7 E \u09b9\u099a\u09cd\u099b\u09c7 \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 <em>edge</em>\u00a0\u09b8\u0982\u0996\u09cd\u09af\u09be\u0964</p>\n<p><em>\u201c\u09a1\u09be\u09df\u09be\u0995\u09cd\u09b8\u099f\u09cd\u09b0\u09be \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u0986\u09b0\u0993 \u09a6\u09cd\u09b0\u09c1\u09a4 \u098f\u09ac\u0982 \u0995\u09be\u09b0\u09cd\u09af\u0995\u09b0 \u0995\u09b0\u09a4\u09c7 \u0995\u09bf\u099b\u09c1 \u0985\u09aa\u09cd\u099f\u09bf\u09ae\u09be\u0987\u099c\u09c7\u09b6\u09a8 \u0995\u09cc\u09b6\u09b2 \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09be \u09af\u09c7\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7\u0964 \u098f\u0996\u09be\u09a8\u09c7 \u0986\u09ae\u09b0\u09be Indexed Priority Queue (IPQ) \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09c7 \u0995\u09c0\u09ad\u09be\u09ac\u09c7 \u0995\u09bf\u09ad\u09be\u09ac\u09c7 \u09aa\u09c1\u09b0\u09be\u09a8\u09cb \u09a8\u09cb\u09a1\u0997\u09c1\u09b2\u09cb\u09b0 \u099c\u09a8\u09cd\u09af \u09a1\u09bf\u09b8\u09cd\u099f\u09c7\u09a8\u09cd\u09b8 \u099a\u09c7\u0995\u09bf\u0982 \u098f\u09dc\u09bf\u09df\u09c7 \u099a\u09b2\u09a4\u09c7 \u09aa\u09be\u09b0\u09bf \u098f\u09ac\u0982 \u098f\u099f\u09bf \u0995\u09bf\u09ad\u09be\u09ac\u09c7 O(E * log2(V)) \u099f\u09be\u0987\u09ae \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf\u09a4\u09c7 \u0995\u09be\u09b0\u09cd\u09af\u0995\u09b0\u09c0 \u09b9\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7, \u09a4\u09be \u0986\u09b2\u09cb\u099a\u09a8\u09be \u0995\u09b0\u09ac\u09cb\u0964\u201d \u098f\u0987 \u09a8\u09bf\u09df\u09c7 \u0986\u09b2\u09be\u09a6\u09be \u098f\u0995\u099f\u09bf \u09b8\u09cd\u099f\u09cb\u09b0\u09bf\u00a0\u09b2\u09c7\u0996\u09ac\u2026</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=40e3551f8581\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["dijkstras-algorithm","shortest-path","graph-algorithms"]},{"title":"Bellman\u2013Ford algorithm / \u09ac\u09c7\u09b2\u09ae\u09cd\u09af\u09be\u09a8 \u09ab\u09cb\u09b0\u09cd\u09a1 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u0983","pubDate":"2024-11-07 18:19:01","link":"https://medium.com/@rabbecse1677/bellman-ford-algorithm-%E0%A6%AC%E0%A7%87%E0%A6%B2%E0%A6%AE%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A8-%E0%A6%AB%E0%A7%8B%E0%A6%B0%E0%A7%8D%E0%A6%A1-%E0%A6%8F%E0%A6%B2%E0%A6%97%E0%A6%B0%E0%A6%BF%E0%A6%A6%E0%A6%AE%E0%A6%83-e9a0ba0427c8?source=rss-74029bb25da3------2","guid":"https://medium.com/p/e9a0ba0427c8","author":"Fazle Rabbe Bipul","thumbnail":"","description":"\n<p><strong>\u09ac\u09be\u0982\u09b2\u09be \u09ac\u09cd\u09af\u09be\u0996\u09cd\u09af\u09be:</strong> \u09ac\u09c7\u09b2\u09ae\u09cd\u09af\u09be\u09a8-\u09ab\u09cb\u09b0\u09cd\u09a1 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u09a6\u09bf\u09af\u09bc\u09c7 \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 \u098f\u0987 \u09a8\u09bf\u09b0\u09cd\u09a6\u09bf\u09b7\u09cd\u099f \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u0985\u09a8\u09cd\u09af \u09a8\u09cb\u09a1\u09c7 \u09af\u09be\u0993\u09af\u09bc\u09be\u09b0 \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u0996\u09c1\u0981\u099c\u09c7 \u09aa\u09be\u0993\u09af\u09bc\u09be \u09af\u09be\u09af\u09bc\u0964 \u09a4\u09ac\u09c7 \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad <em>length </em>\u098f\u09b0 \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09a5\u09be\u0995\u09b2\u09c7 \u098f\u0987 \u098f\u09b2\u0997\u09cb \u0995\u09be\u099c \u0995\u09b0\u09ac\u09c7\u00a0\u09a8\u09be\u0964</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*xgeKzTHN2L-pNAkdzhZ7ug.png\"></figure><h3>\n<strong>\u098f\u09b2\u0997\u09cb\u09b0\u09bf\u09a6\u09ae\u0983 </strong>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u0995\u09c7 \u09e9 \u099f\u09be \u09b8\u09cd\u099f\u09c7\u09aa\u09c7 \u09ac\u09c1\u099c\u09be\u09b0 \u099a\u09c7\u09b7\u09cd\u099f\u09be\u00a0\u0995\u09b0\u09cb\u0964</h3>\n<h3><strong>1. \u09b8\u09c7\u099f\u0986\u09aa</strong></h3>\n<p>\u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u09aa\u09cd\u09b0\u09a4\u09cd\u09af\u09c7\u0995 \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u099f\u09cd\u09b0\u09cd\u09af\u09be\u0995 \u0995\u09b0\u09a4\u09c7 Dis array \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09be\u00a0\u09b9\u09ac\u09c7\u0964</p>\n<ul><li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3\u09b8\u09cd\u09ac\u09b0\u09c2\u09aa, \u09af\u09a6\u09bf dis[5] = 3 \u09b9\u09af\u09bc, \u09a4\u09be\u09b0 \u09ae\u09be\u09a8\u09c7 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u09eb \u09a8\u09be\u09ae\u09cd\u09ac\u09be\u09b0 \u09a8\u09cb\u09a1\u09c7 \u09af\u09c7\u09a4\u09c7 \u09b8\u09b0\u09cd\u09ac\u09a8\u09bf\u09ae\u09cd\u09a8 \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac\u00a0\u09e9\u0964</li></ul>\n<h3>2. \u09b0\u09bf\u09b2\u09be\u0995\u09cd\u09b8\u09c7\u09b6\u09a8</h3>\n<p>\u09af\u09a6\u09bf \u098f\u09ae\u09a8 \u0995\u09cb\u09a8 \u09aa\u09a5 \u09aa\u09be\u0993\u09af\u09bc\u09be \u09af\u09be\u09af\u09bc \u09af\u09c7\u0996\u09be\u09a8\u09c7 \u0986\u0997\u09c7\u09b0 \u09a4\u09c1\u09b2\u09a8\u09be\u09af\u09bc \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac\u09c7 \u09aa\u09cc\u0981\u099b\u09be\u09a8\u09cb \u09af\u09be\u09af\u09bc, \u09a4\u09be\u09b9\u09b2\u09c7 dis[node] \u0986\u09aa\u09a1\u09c7\u099f \u0995\u09b0\u09be\u00a0\u09b9\u09ac\u09c7\u0964</p>\n<ul><li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3\u09b8\u09cd\u09ac\u09b0\u09c2\u09aa, \u09b8\u09cb\u09b0\u09cd\u09b8 = U, \u09a1\u09c7\u09b8\u09cd\u099f\u09bf\u09a8\u09c7\u09b6\u09a8 = V, \u098f\u09ac\u0982 \u0993\u09af\u09bc\u09c7\u099f = Wt \u09b9\u09b2\u09c7, \u0986\u09ae\u09b0\u09be \u099a\u09c7\u0995 \u0995\u09b0\u09ac\u0983 if (dis[u] + Wt &lt; dis[v]) dis[v] = dis[u] +\u00a0Wt;</li></ul>\n<h3>3. \u0987\u099f\u09c7\u09b0\u09c7\u09b6\u09a8</h3>\n<p>N-1 \u09ac\u09be\u09b0 \u09b0\u09bf\u09b2\u09be\u0995\u09cd\u09b8\u09c7\u09b6\u09a8 \u099a\u09c7\u0995 \u099a\u09be\u09b2\u09be\u09a8\u09cb \u09b9\u09ac\u09c7, \u09af\u09c7\u0996\u09be\u09a8\u09c7 N \u09b9\u09b2\u09cb \u09a8\u09cb\u09a1 \u09b8\u0982\u0996\u09cd\u09af\u09be\u0964 \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u0987\u099f\u09c7\u09b0\u09c7\u09b6\u09a8 \u09b6\u09c7\u09b7\u09c7, \u09aa\u09cd\u09b0\u09a4\u09cd\u09af\u09c7\u0995 \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u09aa\u09be\u0993\u09af\u09bc\u09be\u00a0\u09af\u09be\u09ac\u09c7\u0964</p>\n<p>Code C++:</p>\n<pre>#include&lt;bits/stdc++.h&gt;<br>#define f first<br>#define s second<br>#define pb push_back<br>using namespace std;<br><br>int main(){<br>    int N,m; ///nodes , no_of_edges<br>    cin &gt;&gt; N &gt;&gt; m;<br>    vector&lt;pair&lt; pair&lt;int, int&gt;, int&gt;&gt; edges; //  ({u,v}, wt) == edges<br>                                            //  ({f.f, f.s}, s) == edges<br>    for(int i = 0;i&lt;m;i++) {<br>        int u, v, wt;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; wt;<br>        edges.pb({{u,v}, wt});<br>    }<br><br>    int src; /// source_node<br>    cin &gt;&gt; src;<br><br>    int inf = INT_MAX;<br>    vector&lt;int&gt; dis(N, inf);// by default set all the nodes distance inf<br>                            // from source node<br><br>    dis[src] = 0; /// distance from source node to source node Zero<br><br>    for(int i = 1;i&lt;=N-1;i++) { /// do the Check process for N-1 times<br>        for(auto it: edges) {<br>            if(dis[it.f.f] + it.s &lt; dis[it.f.s]) { /// u + wt &lt; v<br>                dis[it.f.s] = dis[it.f.f] + it.s;<br>            }<br>        }<br>    }<br><br>    int ok = 0; /// looking for a negative Cycle :)<br>    for(auto it: edges) {<br>        if(dis[it.f.f] + it.s &lt; dis[it.f.s]) { /// if still decreasing<br>                                        //distance, means a negative Cycle<br>            cout &lt;&lt; \"Negative Cycle\";<br>            ok = 1;<br>            break;<br>        }<br>    }<br><br>    if(!ok) {<br>        for(int i = 0;i&lt;N;i++) { /// finally print the distance of ith node<br>            cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; dis[i] &lt;&lt; endl;<br>        }<br>    }<br><br>    return 0;<br>}<br><br>/*<br>nodes, no_of_edges<br>edges with cost<br>..........<br><br>Source<br><br>6 7<br>3 2 6<br>5 3 1<br>0 1 5<br>1 5 -3<br>1 2 -2<br>3 4 -2<br>2 4 3<br>0<br>*/</pre>\n<h3>Complexity / \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf</h3>\n<p>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u099f\u09be\u0987\u09ae \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf \u09b9\u09b2\u09cb <strong>(N-1) * O(Edges)</strong>\u0964<br><strong>\u09a6\u09cd\u09b0\u09b7\u09cd\u099f\u09ac\u09cd\u09af:</strong> \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 \u098f\u099c \u0997\u09c1\u09b2\u09cb \u0995\u09cb\u09a8 \u0985\u09b0\u09cd\u09a1\u09be\u09b0\u09c7 \u0987\u09a8\u09aa\u09c1\u099f \u09a8\u09c7\u0993\u09af\u09bc\u09be \u09b9\u09af\u09bc \u09a4\u09be\u09a4\u09c7 \u09ab\u09b2\u09be\u09ab\u09b2\u09c7\u09b0 \u0995\u09cb\u09a8 \u09aa\u09b0\u09bf\u09ac\u09b0\u09cd\u09a4\u09a8 \u0986\u09b8\u09ac\u09c7\u00a0\u09a8\u09be\u0964</p>\n<p><em>\u09af\u09a6\u09bf\u0993 \u09ac\u09c7\u09b2\u09ae\u09cd\u09af\u09be\u09a8-\u09ab\u09cb\u09b0\u09cd\u09a1 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf \u09a4\u09c1\u09b2\u09a8\u09be\u09ae\u09c2\u09b2\u0995 \u09ac\u09c7\u09b6\u09bf, \u09ab\u09cd\u09b2\u09af\u09bc\u09c7\u09a1-\u0993\u09af\u09bc\u09be\u09b0\u09b6\u09be\u09b2 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09c7 \u0986\u09b0\u09cb \u0995\u09ae \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf\u09a4\u09c7 \u098f\u0987 \u0995\u09be\u099c\u099f\u09bf \u0995\u09b0\u09be \u09b8\u09ae\u09cd\u09ad\u09ac\u0964 \u09ab\u09cd\u09b2\u09af\u09bc\u09c7\u09a1-\u0993\u09af\u09bc\u09be\u09b0\u09b6\u09be\u09b2 \u09a8\u09bf\u09af\u09bc\u09c7 \u09aa\u09b0\u09ac\u09b0\u09cd\u09a4\u09c0\u09a4\u09c7 \u0986\u09b2\u09cb\u099a\u09a8\u09be \u0995\u09b0\u09be\u00a0\u09b9\u09ac\u09c7\u0964</em></p>\n<p><strong>\u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2\u00a0\u099a\u09c7\u0995</strong></p>\n<p>\u098f\u0996\u09a8 \u09a1\u09bf\u09b0\u09c7\u0995\u09cd\u099f\u09c7\u09a1 \u0997\u09cd\u09b0\u09be\u09ab\u09c7 Negative value \u09a8\u09bf\u09df\u09c7 \u0995\u09cb\u09a8 \u09b8\u09ae\u09b8\u09cd\u09af\u09be \u09a8\u09c7\u0987 \u0995\u09bf\u09a8\u09cd\u09a4\u09c1 \u09af\u09a6\u09bf \u0986\u09a8\u09a1\u09bf\u09b0\u09c7\u0995\u09cd\u099f\u09c7\u09a1 \u0997\u09cd\u09b0\u09be\u09ab \u09b9\u09df, \u09a4\u09be\u09b9\u09b2\u09c7 \u0995\u09cb\u09a1 \u0995\u09b0\u09be\u09b0 \u09b8\u09ae\u09df <strong>bidirectional </strong>\u0997\u09cd\u09b0\u09be\u09ab \u09a7\u09b0\u09c7 \u0995\u09b0\u09a4\u09c7 \u09b9\u09df\u0964 \u098f\u09a4\u09c7 \u09b8\u09ae\u09b8\u09cd\u09af\u09be \u09b9\u099a\u09cd\u099b\u09c7\u00a0, negative value \u098f\u09b0 \u099c\u09a8\u09cd\u09af \u098f\u0995\u099f\u09be \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09a4\u09c8\u09b0\u09bf\u00a0\u09b9\u09df\u0964</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/914/1*tXiHgrJZcT3nWlMozTKnzQ.png\"></figure><p>\u09af\u09c7\u09ae\u09a8 \u098f\u0996\u09be\u09a8\u09c7 undirected \u0997\u09cd\u09b0\u09be\u09ab\u09c7 \u09a8\u09cb\u09a1 A \u09a5\u09c7\u0995\u09c7 \u09a8\u09cb\u09a1 B \u09a4\u09c7 \u09af\u09be\u0993\u09df\u09be\u09b0 \u09af\u09be\u0993\u09df\u09be\u09b0 Cost \u09b9\u099a\u09cd\u099b\u09c7 -2. \u0995\u09cb\u09a1 \u098f \u0987\u09ae\u09aa\u09cd\u09b2\u09bf\u09ae\u09c7\u09a8\u09cd\u099f \u0995\u09b0\u09be\u09b0 \u09b8\u09ae\u09df \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09a6\u09c1\u0987\u09a6\u09bf\u0995\u09c7\u0987 \u09af\u09be\u0993\u09df\u09be \u09af\u09be\u09df \u0985\u09b0\u09cd\u09a5\u09be\u09ce bidirectional \u09a7\u09b0\u09c7 \u09a8\u09bf\u09a4\u09c7 \u09b9\u09ac\u09c7 \u09a4\u0996\u09a8 \u09aa\u09be\u09b6\u09c7\u09b0 \u099a\u09bf\u09a4\u09cd\u09b0\u09c7\u09b0 \u09ae\u09a4 \u098f\u0995\u099f\u09bf \u09a8\u09c7\u0997\u09c7\u099f\u09bf \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09a4\u09c8\u09b0\u09bf \u09b9\u09ac\u09c7 \u0964 \u098f\u0995\u09cd\u09b7\u09c7\u09a4\u09cd\u09b0\u09c7 \u09a4\u0996\u09a8 \u098f\u0987 \u098f\u09b2\u0997\u09cb \u0995\u09be\u099c \u0995\u09b0\u09ac\u09c7\u00a0\u09a8\u09be\u0964</p>\n<p><strong>\u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2\u00a0\u099a\u09c7\u0995</strong></p>\n<p>\u0986\u09ae\u09b0\u09be \u0987\u09a4\u09cb\u09ae\u09a7\u09cd\u09af\u09c7\u0987 \u099c\u09c7\u09a8\u09c7\u099b\u09bf N-1 \u09b8\u0982\u0996\u09cd\u09af\u0995 \u09ac\u09be\u09b0 \u09b2\u09c1\u09aa \u099a\u09be\u09b2\u09be\u09a8\u09cb\u09b0 \u09aa\u09b0\u0987 \u0986\u09ae\u09b0\u09be \u09aa\u09cd\u09b0\u09a4\u09cd\u09af\u09c7\u0995\u09cd\u099f\u09be \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09ac\u09c7\u09b8\u09cd\u099f \u09aa\u09b8\u09bf\u09ac\u09b2 \u098f\u09a8\u09cd\u09b8\u09be\u09b0 \u09aa\u09c7\u09df\u09c7 \u09af\u09be\u09ac\u09cb\u00a0\u0964</p>\n<p>\u098f\u0995\u099f\u09bf \u099b\u09cb\u099f\u09cd\u099f \u099a\u09c7\u0995\u09c7\u09b0 \u09ae\u09be\u09a7\u09cd\u09af\u09ae\u09c7 \u0986\u09ae\u09b0\u09be \u09ac\u09b2\u09a4\u09c7 \u09aa\u09be\u09b0\u09bf \u09af\u09c7 \u0997\u09cd\u09b0\u09be\u09ab\u09c7 \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u0986\u099b\u09c7 \u0995\u09bf \u09a8\u09be\u0964 N-1 \u0987\u099f\u09c7\u09b0\u09c7\u09b6\u09a8 \u099a\u09be\u09b2\u09be\u09a8\u09cb\u09b0 \u09aa\u09b0\u0993 \u09af\u09a6\u09bf \u0995\u09cb\u09a8 \u09a8\u09cb\u09a1\u09c7\u09b0 \u09ad\u09cd\u09af\u09be\u09b2\u09c1 \u0995\u09ae\u09a4\u09c7 \u09a5\u09be\u0995\u09c7, \u09a4\u09be\u09b9\u09b2\u09c7 \u09b8\u09c7\u0996\u09be\u09a8\u09c7 \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2\u00a0\u09b0\u09af\u09bc\u09c7\u099b\u09c7\u0964</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*VCjZOifIzr3NET_Y14AxcA.png\"></figure><p><strong>\u0989\u09a6\u09be\u09b9\u09b0\u09a3:</strong> \u098f\u0995\u099f\u09bf \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09e7-\u09eb-\u09ed = -\u09e7\u09e7 \u098f\u09b0 \u09ae\u09a4\u09cb \u09a5\u09be\u0995\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7, \u09af\u09c7\u0996\u09be\u09a8\u09c7 \u09aa\u09cd\u09b0\u09a4\u09bf\u09ac\u09be\u09b0\u0987 \u09ad\u09cd\u09af\u09be\u09b2\u09c1 \u0995\u09ae\u09c7 \u09af\u09be\u09af\u09bc \u098f\u09ac\u0982 \u0985\u09b8\u09c0\u09ae \u09b2\u09c1\u09aa\u09c7 \u09aa\u09a1\u09bc\u09c7\u00a0\u09af\u09be\u09af\u09bc\u0964</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e9a0ba0427c8\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><strong>\u09ac\u09be\u0982\u09b2\u09be \u09ac\u09cd\u09af\u09be\u0996\u09cd\u09af\u09be:</strong> \u09ac\u09c7\u09b2\u09ae\u09cd\u09af\u09be\u09a8-\u09ab\u09cb\u09b0\u09cd\u09a1 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u09a6\u09bf\u09af\u09bc\u09c7 \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 \u098f\u0987 \u09a8\u09bf\u09b0\u09cd\u09a6\u09bf\u09b7\u09cd\u099f \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u0985\u09a8\u09cd\u09af \u09a8\u09cb\u09a1\u09c7 \u09af\u09be\u0993\u09af\u09bc\u09be\u09b0 \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u0996\u09c1\u0981\u099c\u09c7 \u09aa\u09be\u0993\u09af\u09bc\u09be \u09af\u09be\u09af\u09bc\u0964 \u09a4\u09ac\u09c7 \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad <em>length </em>\u098f\u09b0 \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09a5\u09be\u0995\u09b2\u09c7 \u098f\u0987 \u098f\u09b2\u0997\u09cb \u0995\u09be\u099c \u0995\u09b0\u09ac\u09c7\u00a0\u09a8\u09be\u0964</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*xgeKzTHN2L-pNAkdzhZ7ug.png\"></figure><h3>\n<strong>\u098f\u09b2\u0997\u09cb\u09b0\u09bf\u09a6\u09ae\u0983 </strong>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u0995\u09c7 \u09e9 \u099f\u09be \u09b8\u09cd\u099f\u09c7\u09aa\u09c7 \u09ac\u09c1\u099c\u09be\u09b0 \u099a\u09c7\u09b7\u09cd\u099f\u09be\u00a0\u0995\u09b0\u09cb\u0964</h3>\n<h3><strong>1. \u09b8\u09c7\u099f\u0986\u09aa</strong></h3>\n<p>\u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u09aa\u09cd\u09b0\u09a4\u09cd\u09af\u09c7\u0995 \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u099f\u09cd\u09b0\u09cd\u09af\u09be\u0995 \u0995\u09b0\u09a4\u09c7 Dis array \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09be\u00a0\u09b9\u09ac\u09c7\u0964</p>\n<ul><li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3\u09b8\u09cd\u09ac\u09b0\u09c2\u09aa, \u09af\u09a6\u09bf dis[5] = 3 \u09b9\u09af\u09bc, \u09a4\u09be\u09b0 \u09ae\u09be\u09a8\u09c7 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a8\u09cb\u09a1 \u09a5\u09c7\u0995\u09c7 \u09eb \u09a8\u09be\u09ae\u09cd\u09ac\u09be\u09b0 \u09a8\u09cb\u09a1\u09c7 \u09af\u09c7\u09a4\u09c7 \u09b8\u09b0\u09cd\u09ac\u09a8\u09bf\u09ae\u09cd\u09a8 \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac\u00a0\u09e9\u0964</li></ul>\n<h3>2. \u09b0\u09bf\u09b2\u09be\u0995\u09cd\u09b8\u09c7\u09b6\u09a8</h3>\n<p>\u09af\u09a6\u09bf \u098f\u09ae\u09a8 \u0995\u09cb\u09a8 \u09aa\u09a5 \u09aa\u09be\u0993\u09af\u09bc\u09be \u09af\u09be\u09af\u09bc \u09af\u09c7\u0996\u09be\u09a8\u09c7 \u0986\u0997\u09c7\u09b0 \u09a4\u09c1\u09b2\u09a8\u09be\u09af\u09bc \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac\u09c7 \u09aa\u09cc\u0981\u099b\u09be\u09a8\u09cb \u09af\u09be\u09af\u09bc, \u09a4\u09be\u09b9\u09b2\u09c7 dis[node] \u0986\u09aa\u09a1\u09c7\u099f \u0995\u09b0\u09be\u00a0\u09b9\u09ac\u09c7\u0964</p>\n<ul><li>\u0989\u09a6\u09be\u09b9\u09b0\u09a3\u09b8\u09cd\u09ac\u09b0\u09c2\u09aa, \u09b8\u09cb\u09b0\u09cd\u09b8 = U, \u09a1\u09c7\u09b8\u09cd\u099f\u09bf\u09a8\u09c7\u09b6\u09a8 = V, \u098f\u09ac\u0982 \u0993\u09af\u09bc\u09c7\u099f = Wt \u09b9\u09b2\u09c7, \u0986\u09ae\u09b0\u09be \u099a\u09c7\u0995 \u0995\u09b0\u09ac\u0983 if (dis[u] + Wt &lt; dis[v]) dis[v] = dis[u] +\u00a0Wt;</li></ul>\n<h3>3. \u0987\u099f\u09c7\u09b0\u09c7\u09b6\u09a8</h3>\n<p>N-1 \u09ac\u09be\u09b0 \u09b0\u09bf\u09b2\u09be\u0995\u09cd\u09b8\u09c7\u09b6\u09a8 \u099a\u09c7\u0995 \u099a\u09be\u09b2\u09be\u09a8\u09cb \u09b9\u09ac\u09c7, \u09af\u09c7\u0996\u09be\u09a8\u09c7 N \u09b9\u09b2\u09cb \u09a8\u09cb\u09a1 \u09b8\u0982\u0996\u09cd\u09af\u09be\u0964 \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u0987\u099f\u09c7\u09b0\u09c7\u09b6\u09a8 \u09b6\u09c7\u09b7\u09c7, \u09aa\u09cd\u09b0\u09a4\u09cd\u09af\u09c7\u0995 \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u0995\u09ae \u09a6\u09c2\u09b0\u09a4\u09cd\u09ac \u09aa\u09be\u0993\u09af\u09bc\u09be\u00a0\u09af\u09be\u09ac\u09c7\u0964</p>\n<p>Code C++:</p>\n<pre>#include&lt;bits/stdc++.h&gt;<br>#define f first<br>#define s second<br>#define pb push_back<br>using namespace std;<br><br>int main(){<br>    int N,m; ///nodes , no_of_edges<br>    cin &gt;&gt; N &gt;&gt; m;<br>    vector&lt;pair&lt; pair&lt;int, int&gt;, int&gt;&gt; edges; //  ({u,v}, wt) == edges<br>                                            //  ({f.f, f.s}, s) == edges<br>    for(int i = 0;i&lt;m;i++) {<br>        int u, v, wt;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; wt;<br>        edges.pb({{u,v}, wt});<br>    }<br><br>    int src; /// source_node<br>    cin &gt;&gt; src;<br><br>    int inf = INT_MAX;<br>    vector&lt;int&gt; dis(N, inf);// by default set all the nodes distance inf<br>                            // from source node<br><br>    dis[src] = 0; /// distance from source node to source node Zero<br><br>    for(int i = 1;i&lt;=N-1;i++) { /// do the Check process for N-1 times<br>        for(auto it: edges) {<br>            if(dis[it.f.f] + it.s &lt; dis[it.f.s]) { /// u + wt &lt; v<br>                dis[it.f.s] = dis[it.f.f] + it.s;<br>            }<br>        }<br>    }<br><br>    int ok = 0; /// looking for a negative Cycle :)<br>    for(auto it: edges) {<br>        if(dis[it.f.f] + it.s &lt; dis[it.f.s]) { /// if still decreasing<br>                                        //distance, means a negative Cycle<br>            cout &lt;&lt; \"Negative Cycle\";<br>            ok = 1;<br>            break;<br>        }<br>    }<br><br>    if(!ok) {<br>        for(int i = 0;i&lt;N;i++) { /// finally print the distance of ith node<br>            cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; dis[i] &lt;&lt; endl;<br>        }<br>    }<br><br>    return 0;<br>}<br><br>/*<br>nodes, no_of_edges<br>edges with cost<br>..........<br><br>Source<br><br>6 7<br>3 2 6<br>5 3 1<br>0 1 5<br>1 5 -3<br>1 2 -2<br>3 4 -2<br>2 4 3<br>0<br>*/</pre>\n<h3>Complexity / \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf</h3>\n<p>\u098f\u0987 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u099f\u09be\u0987\u09ae \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf \u09b9\u09b2\u09cb <strong>(N-1) * O(Edges)</strong>\u0964<br><strong>\u09a6\u09cd\u09b0\u09b7\u09cd\u099f\u09ac\u09cd\u09af:</strong> \u0997\u09cd\u09b0\u09be\u09ab\u09c7\u09b0 \u098f\u099c \u0997\u09c1\u09b2\u09cb \u0995\u09cb\u09a8 \u0985\u09b0\u09cd\u09a1\u09be\u09b0\u09c7 \u0987\u09a8\u09aa\u09c1\u099f \u09a8\u09c7\u0993\u09af\u09bc\u09be \u09b9\u09af\u09bc \u09a4\u09be\u09a4\u09c7 \u09ab\u09b2\u09be\u09ab\u09b2\u09c7\u09b0 \u0995\u09cb\u09a8 \u09aa\u09b0\u09bf\u09ac\u09b0\u09cd\u09a4\u09a8 \u0986\u09b8\u09ac\u09c7\u00a0\u09a8\u09be\u0964</p>\n<p><em>\u09af\u09a6\u09bf\u0993 \u09ac\u09c7\u09b2\u09ae\u09cd\u09af\u09be\u09a8-\u09ab\u09cb\u09b0\u09cd\u09a1 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae\u09c7\u09b0 \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf \u09a4\u09c1\u09b2\u09a8\u09be\u09ae\u09c2\u09b2\u0995 \u09ac\u09c7\u09b6\u09bf, \u09ab\u09cd\u09b2\u09af\u09bc\u09c7\u09a1-\u0993\u09af\u09bc\u09be\u09b0\u09b6\u09be\u09b2 \u098f\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09c7 \u0986\u09b0\u09cb \u0995\u09ae \u0995\u09ae\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf\u09a4\u09c7 \u098f\u0987 \u0995\u09be\u099c\u099f\u09bf \u0995\u09b0\u09be \u09b8\u09ae\u09cd\u09ad\u09ac\u0964 \u09ab\u09cd\u09b2\u09af\u09bc\u09c7\u09a1-\u0993\u09af\u09bc\u09be\u09b0\u09b6\u09be\u09b2 \u09a8\u09bf\u09af\u09bc\u09c7 \u09aa\u09b0\u09ac\u09b0\u09cd\u09a4\u09c0\u09a4\u09c7 \u0986\u09b2\u09cb\u099a\u09a8\u09be \u0995\u09b0\u09be\u00a0\u09b9\u09ac\u09c7\u0964</em></p>\n<p><strong>\u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2\u00a0\u099a\u09c7\u0995</strong></p>\n<p>\u098f\u0996\u09a8 \u09a1\u09bf\u09b0\u09c7\u0995\u09cd\u099f\u09c7\u09a1 \u0997\u09cd\u09b0\u09be\u09ab\u09c7 Negative value \u09a8\u09bf\u09df\u09c7 \u0995\u09cb\u09a8 \u09b8\u09ae\u09b8\u09cd\u09af\u09be \u09a8\u09c7\u0987 \u0995\u09bf\u09a8\u09cd\u09a4\u09c1 \u09af\u09a6\u09bf \u0986\u09a8\u09a1\u09bf\u09b0\u09c7\u0995\u09cd\u099f\u09c7\u09a1 \u0997\u09cd\u09b0\u09be\u09ab \u09b9\u09df, \u09a4\u09be\u09b9\u09b2\u09c7 \u0995\u09cb\u09a1 \u0995\u09b0\u09be\u09b0 \u09b8\u09ae\u09df <strong>bidirectional </strong>\u0997\u09cd\u09b0\u09be\u09ab \u09a7\u09b0\u09c7 \u0995\u09b0\u09a4\u09c7 \u09b9\u09df\u0964 \u098f\u09a4\u09c7 \u09b8\u09ae\u09b8\u09cd\u09af\u09be \u09b9\u099a\u09cd\u099b\u09c7\u00a0, negative value \u098f\u09b0 \u099c\u09a8\u09cd\u09af \u098f\u0995\u099f\u09be \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09a4\u09c8\u09b0\u09bf\u00a0\u09b9\u09df\u0964</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/914/1*tXiHgrJZcT3nWlMozTKnzQ.png\"></figure><p>\u09af\u09c7\u09ae\u09a8 \u098f\u0996\u09be\u09a8\u09c7 undirected \u0997\u09cd\u09b0\u09be\u09ab\u09c7 \u09a8\u09cb\u09a1 A \u09a5\u09c7\u0995\u09c7 \u09a8\u09cb\u09a1 B \u09a4\u09c7 \u09af\u09be\u0993\u09df\u09be\u09b0 \u09af\u09be\u0993\u09df\u09be\u09b0 Cost \u09b9\u099a\u09cd\u099b\u09c7 -2. \u0995\u09cb\u09a1 \u098f \u0987\u09ae\u09aa\u09cd\u09b2\u09bf\u09ae\u09c7\u09a8\u09cd\u099f \u0995\u09b0\u09be\u09b0 \u09b8\u09ae\u09df \u0986\u09ae\u09be\u09a6\u09c7\u09b0 \u09a6\u09c1\u0987\u09a6\u09bf\u0995\u09c7\u0987 \u09af\u09be\u0993\u09df\u09be \u09af\u09be\u09df \u0985\u09b0\u09cd\u09a5\u09be\u09ce bidirectional \u09a7\u09b0\u09c7 \u09a8\u09bf\u09a4\u09c7 \u09b9\u09ac\u09c7 \u09a4\u0996\u09a8 \u09aa\u09be\u09b6\u09c7\u09b0 \u099a\u09bf\u09a4\u09cd\u09b0\u09c7\u09b0 \u09ae\u09a4 \u098f\u0995\u099f\u09bf \u09a8\u09c7\u0997\u09c7\u099f\u09bf \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09a4\u09c8\u09b0\u09bf \u09b9\u09ac\u09c7 \u0964 \u098f\u0995\u09cd\u09b7\u09c7\u09a4\u09cd\u09b0\u09c7 \u09a4\u0996\u09a8 \u098f\u0987 \u098f\u09b2\u0997\u09cb \u0995\u09be\u099c \u0995\u09b0\u09ac\u09c7\u00a0\u09a8\u09be\u0964</p>\n<p><strong>\u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2\u00a0\u099a\u09c7\u0995</strong></p>\n<p>\u0986\u09ae\u09b0\u09be \u0987\u09a4\u09cb\u09ae\u09a7\u09cd\u09af\u09c7\u0987 \u099c\u09c7\u09a8\u09c7\u099b\u09bf N-1 \u09b8\u0982\u0996\u09cd\u09af\u0995 \u09ac\u09be\u09b0 \u09b2\u09c1\u09aa \u099a\u09be\u09b2\u09be\u09a8\u09cb\u09b0 \u09aa\u09b0\u0987 \u0986\u09ae\u09b0\u09be \u09aa\u09cd\u09b0\u09a4\u09cd\u09af\u09c7\u0995\u09cd\u099f\u09be \u09a8\u09cb\u09a1\u09c7\u09b0 \u099c\u09a8\u09cd\u09af \u09ac\u09c7\u09b8\u09cd\u099f \u09aa\u09b8\u09bf\u09ac\u09b2 \u098f\u09a8\u09cd\u09b8\u09be\u09b0 \u09aa\u09c7\u09df\u09c7 \u09af\u09be\u09ac\u09cb\u00a0\u0964</p>\n<p>\u098f\u0995\u099f\u09bf \u099b\u09cb\u099f\u09cd\u099f \u099a\u09c7\u0995\u09c7\u09b0 \u09ae\u09be\u09a7\u09cd\u09af\u09ae\u09c7 \u0986\u09ae\u09b0\u09be \u09ac\u09b2\u09a4\u09c7 \u09aa\u09be\u09b0\u09bf \u09af\u09c7 \u0997\u09cd\u09b0\u09be\u09ab\u09c7 \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u0986\u099b\u09c7 \u0995\u09bf \u09a8\u09be\u0964 N-1 \u0987\u099f\u09c7\u09b0\u09c7\u09b6\u09a8 \u099a\u09be\u09b2\u09be\u09a8\u09cb\u09b0 \u09aa\u09b0\u0993 \u09af\u09a6\u09bf \u0995\u09cb\u09a8 \u09a8\u09cb\u09a1\u09c7\u09b0 \u09ad\u09cd\u09af\u09be\u09b2\u09c1 \u0995\u09ae\u09a4\u09c7 \u09a5\u09be\u0995\u09c7, \u09a4\u09be\u09b9\u09b2\u09c7 \u09b8\u09c7\u0996\u09be\u09a8\u09c7 \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2\u00a0\u09b0\u09af\u09bc\u09c7\u099b\u09c7\u0964</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*VCjZOifIzr3NET_Y14AxcA.png\"></figure><p><strong>\u0989\u09a6\u09be\u09b9\u09b0\u09a3:</strong> \u098f\u0995\u099f\u09bf \u09a8\u09c7\u0997\u09c7\u099f\u09bf\u09ad \u09b8\u09be\u0987\u0995\u09c7\u09b2 \u09e7-\u09eb-\u09ed = -\u09e7\u09e7 \u098f\u09b0 \u09ae\u09a4\u09cb \u09a5\u09be\u0995\u09a4\u09c7 \u09aa\u09be\u09b0\u09c7, \u09af\u09c7\u0996\u09be\u09a8\u09c7 \u09aa\u09cd\u09b0\u09a4\u09bf\u09ac\u09be\u09b0\u0987 \u09ad\u09cd\u09af\u09be\u09b2\u09c1 \u0995\u09ae\u09c7 \u09af\u09be\u09af\u09bc \u098f\u09ac\u0982 \u0985\u09b8\u09c0\u09ae \u09b2\u09c1\u09aa\u09c7 \u09aa\u09a1\u09bc\u09c7\u00a0\u09af\u09be\u09af\u09bc\u0964</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e9a0ba0427c8\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["shortest-path","negative-cycle","bellmanford-algorithm","graph-algorithms"]}]}